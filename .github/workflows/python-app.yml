name: Ghostx CI/CD

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

env:
  PYTHON_VERSION: "3.11"
  POETRY_VERSION: "1.7.1"
  # Flask Configuration
  FLASK_APP: "app"
  FLASK_DEBUG: "0"
  # Database Configuration
  DATABASE_URL: "sqlite:///spoofer.db"
  # Server Configuration
  PORT: "80"
  HOST: "0.0.0.0"
  DOMAIN: "localhost"
  DOMAIN_SCHEME: "http"
  # Rate Limiting
  MAX_EMAILS_PER_HOUR: "10"
  MAX_EMAILS_PER_DAY: "50"

permissions:
  contents: read
  packages: write
  issues: write
  pull-requests: write

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.10", "3.11"]

    steps:
    - name: Checkout repository
      uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
      with:
        fetch-depth: 0

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@65d7f2d534ac1bc67fcd62888c5f4f3d2cb2b236 # v4.7.1
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
        cache-dependency-path: |
          requirements.txt
          pyproject.toml

    - name: Install Poetry
      run: |
        curl -sSL https://install.python-poetry.org | python3 -
        poetry config virtualenvs.create true
        poetry config virtualenvs.in-project true

    - name: Generate poetry.lock
      run: |
        rm -f poetry.lock
        poetry lock
        poetry update waitress --no-dev

    - name: Check for Latest Package Versions
      run: |
        pip install --upgrade pip
        pip install pip-check
        pip-check
        poetry show --outdated

    - name: Install dependencies
      run: |
        poetry env remove --all
        poetry install --with dev --sync --no-root --no-interaction

    - name: Security check dependencies
      run: poetry run safety check

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@eaaf4bedf32dbdc6b720b63067d99c4d77d6047d # v3.1.4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false


  build:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
    - name: Checkout repository
      uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1

    - name: Set up Python
      uses: actions/setup-python@65d7f2d534ac1bc67fcd62888c5f4f3d2cb2b236 # v4.7.1
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install Poetry
      run: |
        curl -sSL https://install.python-poetry.org | python3 -
        poetry config virtualenvs.create true
        poetry config virtualenvs.in-project true

    - name: Build package
      run: poetry build

    - name: Create GitHub Release
      uses: softprops/action-gh-release@de2c0eb89ae2a093876385947365aca7b0e5f844 # v1
      if: startsWith(github.ref, 'refs/tags/')
      with:
        files: dist/*
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production

    steps:
    - name: Deploy to production
      env:
        DEPLOY_KEY: ${{ secrets.DEPLOY_KEY }}
        DEPLOY_HOST: ${{ secrets.DEPLOY_HOST }}
        DEPLOY_USER: ${{ secrets.DEPLOY_USER }}
        DEPLOY_PATH: ${{ secrets.DEPLOY_PATH }}
      run: |
        # Install SSH key
        mkdir -p ~/.ssh
        echo "$DEPLOY_KEY" > ~/.ssh/deploy_key
        chmod 600 ~/.ssh/deploy_key
        
        # Deploy using SSH
        ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no $DEPLOY_USER@$DEPLOY_HOST << 'EOF'
          cd $DEPLOY_PATH
          git pull origin main
          poetry install --no-dev
          poetry run flask db upgrade
          sudo systemctl restart ghostx
        EOF 