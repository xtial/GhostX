name: Ghostx CI/CD

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

env:
  PYTHON_VERSION: "3.11"
  POETRY_VERSION: "1.7.1"
  # Flask Configuration
  FLASK_APP: "app"
  FLASK_DEBUG: "0"
  # Database Configuration
  DATABASE_URL: "sqlite:///spoofer.db"
  # Server Configuration
  PORT: "80"
  HOST: "0.0.0.0"
  DOMAIN: "ghost.sbs"
  DOMAIN_SCHEME: "http"
  # Rate Limiting
  MAX_EMAILS_PER_HOUR: "10"
  MAX_EMAILS_PER_DAY: "50"

permissions:
  contents: read
  packages: write
  issues: write
  pull-requests: write

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11"]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
        cache-dependency-path: |
          requirements.txt
          pyproject.toml

    - name: Install Poetry
      run: |
        curl -sSL https://install.python-poetry.org | python3 -
        poetry config virtualenvs.create true
        poetry config virtualenvs.in-project true

    - name: Generate poetry.lock
      run: |
        poetry lock --no-update
        # Force update for security fixes
        poetry update waitress --no-dev

    - name: Check for Latest Package Versions
      run: |
        pip install --upgrade pip
        pip install pip-check
        pip-check
        poetry show --outdated

    - name: Install dependencies
      run: |
        poetry install --with dev --sync --no-root

    - name: Security check dependencies
      run: poetry run safety check

    - name: Check code formatting with Black
      run: poetry run black . --check --diff

    - name: Sort imports with isort
      run: poetry run isort . --check-only --diff

    - name: Lint with flake8
      run: |
        poetry run flake8 . --count --show-source --statistics
        poetry run flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Static type checking with mypy
      run: poetry run mypy src/ --ignore-missing-imports

    - name: Security check with bandit
      run: poetry run bandit -r src/ -c pyproject.toml

    - name: Run tests with pytest
      env:
        PYTHONPATH: ${{ github.workspace }}
        SECRET_KEY: ${{ secrets.SECRET_KEY }}

      run: poetry run pytest tests/ --cov=src/ --cov-report=xml -v

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

    - uses: anishathalye/proof-html@v2
      with:
        directory: ./site

  build:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install Poetry
      run: |
        curl -sSL https://install.python-poetry.org | python3 -
        poetry config virtualenvs.create true
        poetry config virtualenvs.in-project true

    - name: Build package
      run: poetry build

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      if: startsWith(github.ref, 'refs/tags/')
      with:
        files: dist/*
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload to GitHub Packages
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        poetry config repositories.github https://maven.pkg.github.com/${{ github.repository }}
        poetry publish --repository github --username ${{ github.actor }} --password ${{ secrets.GITHUB_TOKEN }}

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production

    steps:
    - name: Deploy to production
      env:
        DEPLOY_KEY: ${{ secrets.DEPLOY_KEY }}
        DEPLOY_HOST: ${{ secrets.DEPLOY_HOST }}
        DEPLOY_USER: ${{ secrets.DEPLOY_USER }}
        DEPLOY_PATH: ${{ secrets.DEPLOY_PATH }}
      run: |
        # Install SSH key
        mkdir -p ~/.ssh
        echo "$DEPLOY_KEY" > ~/.ssh/deploy_key
        chmod 600 ~/.ssh/deploy_key
        
        # Deploy using SSH
        ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no $DEPLOY_USER@$DEPLOY_HOST << 'EOF'
          cd $DEPLOY_PATH
          git pull origin main
          poetry install --no-dev
          poetry run flask db upgrade
          sudo systemctl restart ghostx
        EOF 